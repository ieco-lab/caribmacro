order <- c(1, 3, 9, 4, 5, 2, 8, 6, 7)
tmp$Variable <- factor(tmp$Variable, levels(as.factor(tmp$Variable))[order])
tmp <- tmp[order(tmp$Variable), ]
tmp$Sig <- ' '
tmp[which(tmp$LCL < 0 & tmp$UCL < 0), 'Sig'] <- '*'
tmp[which(tmp$LCL > 0 & tmp$UCL > 0), 'Sig'] <- '*'
tab <- flextable(tmp[, c('Taxon', 'Assemblage', 'Variable', 'Estimate', 'LCL', 'UCL', 'Sig')])
tab <- colformat_double(tab, digits = 3)
tab <- align(tab, align = "center")
tab <- align(tab, j = 1:3, align = "right")
tab <- align(tab, j = 7, align = "left")
tab <- color(tab, i = 1, j = 7, color = "white", part = "header")
tab <- bold(tab, i = ~ Sig == '*')
tab <- width(tab, j = 'Sig', width = 0.1)
theme_vanilla(tab)
# Exotic Reptilia community
tmp <- Avg.SR[which(Avg.SR$Taxon == 'Reptilia' & Avg.SR$Group == 'E'), ]
order <- c(1, 3, 9, 4, 5, 2, 8, 6, 7)
tmp$Variable <- factor(tmp$Variable, levels(as.factor(tmp$Variable))[order])
tmp <- tmp[order(tmp$Variable), ]
tmp$Sig <- ' '
tmp[which(tmp$LCL < 0 & tmp$UCL < 0), 'Sig'] <- '*'
tmp[which(tmp$LCL > 0 & tmp$UCL > 0), 'Sig'] <- '*'
tab <- flextable(tmp[, c('Taxon', 'Assemblage', 'Variable', 'Estimate', 'LCL', 'UCL', 'Sig')])
tab <- colformat_double(tab, digits = 3)
tab <- align(tab, align = "center")
tab <- align(tab, j = 1:3, align = "right")
tab <- align(tab, j = 7, align = "left")
tab <- color(tab, i = 1, j = 7, color = "white", part = "header")
tab <- bold(tab, i = ~ Sig == '*')
tab <- width(tab, j = 'Sig', width = 0.1)
theme_vanilla(tab)
# Total Reptilia community
tmp <- Avg.SR[which(Avg.SR$Taxon == 'Reptilia' & Avg.SR$Group == 'T'), ]
order <- c(1, 3, 9, 4, 5, 2, 8, 6, 7)
tmp$Variable <- factor(tmp$Variable, levels(as.factor(tmp$Variable))[order])
tmp <- tmp[order(tmp$Variable), ]
tmp$Sig <- ' '
tmp[which(tmp$LCL < 0 & tmp$UCL < 0), 'Sig'] <- '*'
tmp[which(tmp$LCL > 0 & tmp$UCL > 0), 'Sig'] <- '*'
tab <- flextable(tmp[, c('Taxon', 'Assemblage', 'Variable', 'Estimate', 'LCL', 'UCL', 'Sig')])
tab <- colformat_double(tab, digits = 3)
tab <- align(tab, align = "center")
tab <- align(tab, j = 1:3, align = "right")
tab <- align(tab, j = 7, align = "left")
tab <- color(tab, i = 1, j = 7, color = "white", part = "header")
tab <- bold(tab, i = ~ Sig == '*')
tab <- width(tab, j = 'Sig', width = 0.1)
theme_vanilla(tab)
# Native Amphibia community
tmp <- Avg.SR[which(Avg.SR$Taxon == 'Amphibia' & Avg.SR$Group == 'N'), ]
order <- c(1, 3, 9, 4, 5, 2, 8, 6, 7)
tmp$Variable <- factor(tmp$Variable, levels(as.factor(tmp$Variable))[order])
tmp <- tmp[order(tmp$Variable), ]
tmp$Sig <- ' '
tmp[which(tmp$LCL < 0 & tmp$UCL < 0), 'Sig'] <- '*'
tmp[which(tmp$LCL > 0 & tmp$UCL > 0), 'Sig'] <- '*'
tab <- flextable(tmp[, c('Taxon', 'Assemblage', 'Variable', 'Estimate', 'LCL', 'UCL', 'Sig')])
tab <- colformat_double(tab, digits = 3)
tab <- align(tab, align = "center")
tab <- align(tab, j = 1:3, align = "right")
tab <- align(tab, j = 7, align = "left")
tab <- color(tab, i = 1, j = 7, color = "white", part = "header")
tab <- bold(tab, i = ~ Sig == '*')
tab <- width(tab, j = 'Sig', width = 0.1)
theme_vanilla(tab)
# Exotic Amphibia community
tmp <- Avg.SR[which(Avg.SR$Taxon == 'Amphibia' & Avg.SR$Group == 'E'), ]
order <- c(1, 3, 9, 4, 5, 2, 8, 6, 7)
tmp$Variable <- factor(tmp$Variable, levels(as.factor(tmp$Variable))[order])
tmp <- tmp[order(tmp$Variable), ]
tmp$Sig <- ' '
tmp[which(tmp$LCL < 0 & tmp$UCL < 0), 'Sig'] <- '*'
tmp[which(tmp$LCL > 0 & tmp$UCL > 0), 'Sig'] <- '*'
tab <- flextable(tmp[, c('Taxon', 'Assemblage', 'Variable', 'Estimate', 'LCL', 'UCL', 'Sig')])
tab <- colformat_double(tab, digits = 3)
tab <- align(tab, align = "center")
tab <- align(tab, j = 1:3, align = "right")
tab <- align(tab, j = 7, align = "left")
tab <- color(tab, i = 1, j = 7, color = "white", part = "header")
tab <- bold(tab, i = ~ Sig == '*')
tab <- width(tab, j = 'Sig', width = 0.1)
theme_vanilla(tab)
# Total Amphibia community
tmp <- Avg.SR[which(Avg.SR$Taxon == 'Amphibia' & Avg.SR$Group == 'T'), ]
order <- c(1, 3, 9, 4, 5, 2, 8, 6, 7)
tmp$Variable <- factor(tmp$Variable, levels(as.factor(tmp$Variable))[order])
tmp <- tmp[order(tmp$Variable), ]
tmp$Sig <- ' '
tmp[which(tmp$LCL < 0 & tmp$UCL < 0), 'Sig'] <- '*'
tmp[which(tmp$LCL > 0 & tmp$UCL > 0), 'Sig'] <- '*'
tab <- flextable(tmp[, c('Taxon', 'Assemblage', 'Variable', 'Estimate', 'LCL', 'UCL', 'Sig')])
tab <- colformat_double(tab, digits = 3)
tab <- align(tab, align = "center")
tab <- align(tab, j = 1:3, align = "right")
tab <- align(tab, j = 7, align = "left")
tab <- color(tab, i = 1, j = 7, color = "white", part = "header")
tab <- bold(tab, i = ~ Sig == '*')
tab <- width(tab, j = 'Sig', width = 0.1)
theme_vanilla(tab)
Avg.est <- droplevels(Avg.SR[which(Avg.SR$Taxon != 'Anura' & Avg.SR$Taxon != 'All'), ])
vars.fig3 <- c('Area', 'Spread', 'DEM.sd', 'green', 'anthro', 'source', 'econ_iso', 'pop_dens')
tits.F3 <- c("Geographic Area", "Island Spread", "Topographic Complexity", "Natural Habitat",
"Economic Area", "Geographic Isolation", "Economic Isolation",
"Population Density")
panels.F3 <- LETTERS[1:length(tits.F3)]
panels.F3 <- paste0('(', panels.F3)
panels.F3 <- paste0(panels.F3, ')')
cld.abbr <- read.csv(file.path(here(), 'data_out', 'Clade_E_N_SR.csv'), header = TRUE)
cld.abbr <- cld.abbr[, c('Clade', 'Abbreviation', 'Class')]
names(cld.abbr) <- c('Taxon', 'Abbr', 'Class')
Avg.est <- merge(Avg.est, cld.abbr, by = 'Taxon', all = TRUE)
abbr.ord.gr <- c(1, 2, 13, 10, 5, 14, 16, 15, 18, 6, 8, 7, 9, 11, 12, 3, 17, 4)
Avg.est$Abbr.GR <- factor(Avg.est$Abbr, unique(Avg.est$Abbr)[abbr.ord.gr])
Avg.est[which(Avg.est$Taxon == 'All'), 'Class'] <- 'All'
Avg.est$Group <- as.factor(Avg.est$Group)
scaleFUN <- function(x) sprintf("%.1f", x)
fig.3 <- vector('list', length(vars.fig3))
names(fig.3) <- c('area', 'spread', 'topo', 'green', 'anthro', 'iso', 'ships', 'pop')
for (i in 1:(length(vars.fig3))) {
temp <- droplevels(Avg.est[which(Avg.est$Variable == vars.fig3[i] & Avg.est$Abbr.GR != 'Herp'), ])
p <- ggplot(temp, aes(x = Abbr.GR, y = Estimate, color = Assemblage, shape = Class, fill = Fills)) +
geom_hline(yintercept = 0, linetype = 'dotted', color = 'gray30') +
geom_errorbar(aes(ymin = LCL, ymax = UCL), position = position_dodge(width = 0.7),
width = 0, size = 1) +
geom_point(size = 2, position = position_dodge(width = 0.7)) +
scale_color_manual(values = cols) +
scale_shape_manual(values = c(21, 24)) +
scale_fill_manual(values = UINT.cols[intersect(names(UINT.cols), unique(temp$Fills))]) +
scale_y_continuous(labels = scaleFUN) +
ggtitle(tits.F3[i]) + xlab('Taxonomic Clade') + labs(tag = panels.F3[i]) +
theme_classic() +
theme(legend.position = "none", axis.title = element_text(size = 12, color = 'black'),
axis.text.x = element_text(angle = 90, size = 12, hjust = 1, vjust = 0.5, color = 'black'),
axis.text.y = element_text(size = 12, color = 'black'),
plot.title = element_text(hjust = 0.5, size = 14),
plot.tag.position = c(0.155, 0.975))
if ((i %% 2) == 0) {
p <- p + theme(axis.title.y = element_text(angle = 90, size = 12, color = 'white'))
} else {
p <- p + theme(plot.tag.position = c(0.155, 0.975))
}
if (is.element(i, c(1:length(vars.fig3)-2))) {
p <- p + theme(axis.title.x = element_text(size = 12, color = 'white'),
axis.text.x = element_blank())
} else {
p <- p + theme(axis.title.x = element_text(size = 12, color = 'white'))
}
fig.3[[i]] <- p
}
# All Variables together
grid.arrange(grobs = fig.3, ncol = 2, nrow = 4, widths = c(4.09, 3.91), heights = c(rep(2.15, 3), 2.55))
vars.fig3.n <- c('Area', 'Spread', 'DEM.sd', 'green', 'source')
fig.3.n <- vector('list', length(vars.fig3.n))
names(fig.3.n) <- c("area", "spread", "topo", "green", "iso")
tits.F3.n <- c("Geographic Area", "Island Spread", "Topographic Complexity", "Natural Area",
"Geographic Isolation")
for (i in 1:(length(vars.fig3.n))) {
temp <- droplevels(Avg.est[which(Avg.est$Variable == vars.fig3.n[i] & Avg.est$Abbr.GR != 'Herp'), ])
p <- ggplot(temp, aes(x = Abbr.GR, y = Estimate, color = Assemblage, shape = Class, fill = Fills)) +
geom_hline(yintercept = 0, linetype = 'dotted', color = 'gray30') +
geom_errorbar(aes(ymin = LCL, ymax = UCL), position = position_dodge(width = 0.7),
width = 0, size = 1) +
geom_point(size = 2, position = position_dodge(width = 0.7)) +
scale_color_manual(values = cols) +
scale_shape_manual(values = c(21, 24)) +
scale_fill_manual(values = UINT.cols[intersect(names(UINT.cols), unique(temp$Fills))]) +
scale_y_continuous(labels = scaleFUN) +
ggtitle(tits.F3.n[i]) + xlab('Taxonomic Clade') + ylab('Coefficient') + labs(tag = panels.F3[i]) +
theme_classic() +
theme(legend.position = "none", axis.title = element_text(size = 12, color = 'black'),
axis.text.x = element_text(angle = 90, size = 12, hjust = 1, vjust = 0.5, color = 'black'),
axis.text.y = element_text(size = 12, color = 'black'),
plot.title = element_text(hjust = 0.5, size = 14),
plot.tag.position = c(0.155, 0.975))
if (is.element(i, c(2, 4))) {
p <- p + theme(axis.title.y = element_text(angle = 90, size = 12, color = 'white'),
axis.text.y = element_text(size = 12, color = 'black'))
} else {
p <- p + theme(plot.tag.position = c(0.155, 0.975))
}
if (is.element(i, c(1:length(vars.fig3.n)-1))) {
p <- p + theme(axis.title.x = element_text(size = 12, color = 'white'),
axis.text.x = element_blank())
}
fig.3.n[[i]] <- p
}
leg <- as_ggplot(get_legend(fig.3.n[[1]] + guides(fill = FALSE) +
theme(legend.position = 'right', legend.box = 'horizontal')))
fig.3.n[['legend']] <- leg
(fig_4 <- grid.arrange(grobs = fig.3.n, ncol = 2, nrow = 3, widths = c(4.5, 4.5), heights = c(2.17, 2.17, 2.66)))
vars.fig3.a <- c('anthro', 'econ_iso', 'pop_dens')
fig.3.a <- vector('list', length(vars.fig3.a))
names(fig.3.a) <- c("anthro", "ships", "pop")
tits.F3.a <- c("Economic Area", "Economic Isolation", "Population Density")
for (i in 1:(length(vars.fig3.a))) {
temp <- droplevels(Avg.est[which(Avg.est$Variable == vars.fig3.a[i] & Avg.est$Abbr.GR != 'Herp'), ])
p <- ggplot(temp, aes(x = Abbr.GR, y = Estimate, color = Assemblage, shape = Class, fill = Fills)) +
geom_hline(yintercept = 0, linetype = 'dotted', color = 'gray30') +
geom_errorbar(aes(ymin = LCL, ymax = UCL), position = position_dodge(width = 0.7),
width = 0, size = 1) +
geom_point(size = 2, position = position_dodge(width = 0.7)) +
scale_color_manual(values = cols) +
scale_shape_manual(values = c(21, 24)) +
scale_fill_manual(values = UINT.cols[intersect(names(UINT.cols), unique(temp$Fills))]) +
scale_y_continuous(labels = scaleFUN) +
ggtitle(tits.F3.a[i]) + xlab('Taxonomic Clade') + ylab('Coefficient') + labs(tag = panels.F3[i]) +
theme_classic() +
theme(legend.position = "none", axis.title = element_text(size = 12, color = 'black'),
axis.text.x = element_text(angle = 90, size = 12, hjust = 1, vjust = 0.5, color = 'black'),
axis.text.y = element_text(size = 12, color = 'black'),
plot.title = element_text(hjust = 0.5, size = 14),
plot.tag.position = c(0.155, 0.975))
if (i == 2) {
p <- p + theme(axis.title.y = element_text(angle = 90, size = 12, color = 'white'),
axis.text.y = element_text(size = 12, color = 'black'))
} else {
p <- p + theme(plot.tag.position = c(0.155, 0.975))
}
if (is.element(i, 1:2)) {
p <- p + theme(axis.title.x = element_text(size = 12, color = 'white'),
axis.text.x = element_blank())
}
fig.3.a[[i]] <- p
}
leg <- as_ggplot(get_legend(fig.3.a[[1]] + guides(fill = FALSE) +
theme(legend.position = 'right', legend.box = 'horizontal')))
fig.3.a[['legend']] <- leg
(fig_5 <- grid.arrange(grobs = fig.3.a, ncol = 2, nrow = 2, widths = c(4.5, 4.5), heights = c(2.17, 2.66)))
# Native Anolis community
tmp <- Avg.SR[which(Avg.SR$Taxon == 'Anolis' & Avg.SR$Group == 'N'), ]
order <- c(1, 3, 6, 9, 8, 7, 10, 4, 2, 5)
tmp$Variable <- factor(tmp$Variable, levels(as.factor(tmp$Variable))[order])
tmp <- tmp[order(tmp$Variable), ]
tmp$Sig <- ' '
tmp[which(tmp$LCL < 0 & tmp$UCL < 0), 'Sig'] <- '*'
tmp[which(tmp$LCL > 0 & tmp$UCL > 0), 'Sig'] <- '*'
tab <- flextable(tmp[, c('Taxon', 'Assemblage', 'Variable', 'Estimate', 'LCL', 'UCL', 'Sig')])
tab <- colformat_double(tab, digits = 3)
tab <- align(tab, align = "center")
tab <- align(tab, j = 1:3, align = "right")
tab <- align(tab, j = 7, align = "left")
tab <- color(tab, i = 1, j = 7, color = "white", part = "header")
tab <- bold(tab, i = ~ Sig == '*')
tab <- width(tab, j = 'Sig', width = 0.1)
theme_vanilla(tab)
# Exotic Anolis community
tmp <- Avg.SR[which(Avg.SR$Taxon == 'Anolis' & Avg.SR$Group == 'E'), ]
order <- c(1, 3, 6, 9, 8, 7, 10, 4, 2, 5)
tmp$Variable <- factor(tmp$Variable, levels(as.factor(tmp$Variable))[order])
tmp <- tmp[order(tmp$Variable), ]
tmp$Sig <- ' '
tmp[which(tmp$LCL < 0 & tmp$UCL < 0), 'Sig'] <- '*'
tmp[which(tmp$LCL > 0 & tmp$UCL > 0), 'Sig'] <- '*'
tab <- flextable(tmp[, c('Taxon', 'Assemblage', 'Variable', 'Estimate', 'LCL', 'UCL', 'Sig')])
tab <- colformat_double(tab, digits = 3)
tab <- align(tab, align = "center")
tab <- align(tab, j = 1:3, align = "right")
tab <- align(tab, j = 7, align = "left")
tab <- color(tab, i = 1, j = 7, color = "white", part = "header")
tab <- bold(tab, i = ~ Sig == '*')
tab <- width(tab, j = 'Sig', width = 0.1)
theme_vanilla(tab)
# Total Anolis community
tmp <- Avg.SR[which(Avg.SR$Taxon == 'Anolis' & Avg.SR$Group == 'T'), ]
order <- c(1, 3, 6, 9, 8, 7, 10, 4, 2, 5)
tmp$Variable <- factor(tmp$Variable, levels(as.factor(tmp$Variable))[order])
tmp <- tmp[order(tmp$Variable), ]
tmp$Sig <- ' '
tmp[which(tmp$LCL < 0 & tmp$UCL < 0), 'Sig'] <- '*'
tmp[which(tmp$LCL > 0 & tmp$UCL > 0), 'Sig'] <- '*'
tab <- flextable(tmp[, c('Taxon', 'Assemblage', 'Variable', 'Estimate', 'LCL', 'UCL', 'Sig')])
tab <- colformat_double(tab, digits = 3)
tab <- align(tab, align = "center")
tab <- align(tab, j = 1:3, align = "right")
tab <- align(tab, j = 7, align = "left")
tab <- color(tab, i = 1, j = 7, color = "white", part = "header")
tab <- bold(tab, i = ~ Sig == '*')
tab <- width(tab, j = 'Sig', width = 0.1)
theme_vanilla(tab)
# Native Eleutherodactylus community
tmp <- Avg.SR[which(Avg.SR$Taxon == 'Eleutherodactylus' & Avg.SR$Group == 'N'), ]
order <- c(1, 3, 6, 9, 8, 7, 10, 4, 2, 5)
tmp$Variable <- factor(tmp$Variable, levels(as.factor(tmp$Variable))[order])
tmp <- tmp[order(tmp$Variable), ]
tmp$Sig <- ' '
tmp[which(tmp$LCL < 0 & tmp$UCL < 0), 'Sig'] <- '*'
tmp[which(tmp$LCL > 0 & tmp$UCL > 0), 'Sig'] <- '*'
tab <- flextable(tmp[, c('Taxon', 'Assemblage', 'Variable', 'Estimate', 'LCL', 'UCL', 'Sig')])
tab <- colformat_double(tab, digits = 3)
tab <- align(tab, align = "center")
tab <- align(tab, j = 1:3, align = "right")
tab <- align(tab, j = 7, align = "left")
tab <- color(tab, i = 1, j = 7, color = "white", part = "header")
tab <- bold(tab, i = ~ Sig == '*')
tab <- width(tab, j = 'Sig', width = 0.1)
theme_vanilla(tab)
# Exotic Eleutherodactylus community
tmp <- Avg.SR[which(Avg.SR$Taxon == 'Eleutherodactylus' & Avg.SR$Group == 'E'), ]
order <- c(1, 3, 6, 9, 8, 7, 10, 4, 2, 5)
tmp$Variable <- factor(tmp$Variable, levels(as.factor(tmp$Variable))[order])
tmp <- tmp[order(tmp$Variable), ]
tmp$Sig <- ' '
tmp[which(tmp$LCL < 0 & tmp$UCL < 0), 'Sig'] <- '*'
tmp[which(tmp$LCL > 0 & tmp$UCL > 0), 'Sig'] <- '*'
tab <- flextable(tmp[, c('Taxon', 'Assemblage', 'Variable', 'Estimate', 'LCL', 'UCL', 'Sig')])
tab <- colformat_double(tab, digits = 3)
tab <- align(tab, align = "center")
tab <- align(tab, j = 1:3, align = "right")
tab <- align(tab, j = 7, align = "left")
tab <- color(tab, i = 1, j = 7, color = "white", part = "header")
tab <- bold(tab, i = ~ Sig == '*')
tab <- width(tab, j = 'Sig', width = 0.1)
theme_vanilla(tab)
# Total Eleutherodactylus community
tmp <- Avg.SR[which(Avg.SR$Taxon == 'Eleutherodactylus' & Avg.SR$Group == 'T'), ]
order <- c(1, 3, 6, 9, 8, 7, 10, 4, 2, 5)
tmp$Variable <- factor(tmp$Variable, levels(as.factor(tmp$Variable))[order])
tmp <- tmp[order(tmp$Variable), ]
tmp$Sig <- ' '
tmp[which(tmp$LCL < 0 & tmp$UCL < 0), 'Sig'] <- '*'
tmp[which(tmp$LCL > 0 & tmp$UCL > 0), 'Sig'] <- '*'
tab <- flextable(tmp[, c('Taxon', 'Assemblage', 'Variable', 'Estimate', 'LCL', 'UCL', 'Sig')])
tab <- colformat_double(tab, digits = 3)
tab <- align(tab, align = "center")
tab <- align(tab, j = 1:3, align = "right")
tab <- align(tab, j = 7, align = "left")
tab <- color(tab, i = 1, j = 7, color = "white", part = "header")
tab <- bold(tab, i = ~ Sig == '*')
tab <- width(tab, j = 'Sig', width = 0.1)
theme_vanilla(tab)
data <- lm.sr[['Data']]
vars2 <- attr(lm.sr[['Models']][[1]]$terms,'term.labels')
nams<-strsplit(names(data), ".", fixed = TRUE)
nams<-data.frame(matrix(unlist(nams), nrow = length(nams), byrow = TRUE))
names(nams) <- c('Taxon', 'Group')
nams$Taxon <- as.character(nams$Taxon)
nams$Group <- as.character(nams$Group)
R.sq_sr <- data.frame(NULL)
system.time(for (i in 1:length(data)) {
temp <- Avg.SR[which(Avg.SR$Taxon == nams[i, 'Taxon'] &
Avg.SR$Group == nams[i, 'Group']), c('Variable', 'Estimate')]
if (any(!is.na(temp$Estimate))) {
tmp <- r_squared(temp,
data = data[[i]],
response = names(data)[i],
x_vars = vars2,
display = FALSE)
} else {
tmp <- data.frame(R.sq = NA,
adj.R.sq = NA)
}
tmp <- cbind(nams[i, ], tmp)
R.sq_sr <- rbind(R.sq_sr, tmp)
})
write.csv(R.sq_sr, file.path(here(), 'data_out', 'SR_Drivers_R_sq.csv'), row.names=FALSE)
tmp <- R.sq_sr[which(R.sq_sr$Taxon == 'All'), ]
tmp$Sig <- ' '
tmp[which(tmp$R.sq > 0.33), 'Sig'] <- '*'
tmp[which(tmp$adj.R.sq > 0.33), 'Sig'] <- '*'
tmp[which(tmp$R.sq > 0.33 & tmp$adj.R.sq > 0.33), 'Sig'] <- '**'
tmp <- tmp[order(tmp$Group), c("Taxon", "Group", "R.sq", "adj.R.sq", "Sig")]
tab <- flextable(tmp)
tab <- colformat_double(tab, digits = 3)
tab <- align(tab, align = "center")
tab <- align(tab, j = 1:2, align = "right")
tab <- align(tab, j = 3:4, align = "left")
tab <- color(tab, i = 1, j = 5, color = "white", part = "header")
tab <- bold(tab, i = ~ Sig == '**')
tab <- width(tab, j = 'Sig', width = 0.1)
theme_vanilla(tab)
tmp <- R.sq_sr[which(R.sq_sr$Taxon == 'Reptilia'), ]
tmp$Sig <- ' '
tmp[which(tmp$R.sq > 0.33), 'Sig'] <- '*'
tmp[which(tmp$adj.R.sq > 0.33), 'Sig'] <- '*'
tmp[which(tmp$R.sq > 0.33 & tmp$adj.R.sq > 0.33), 'Sig'] <- '**'
tmp <- tmp[order(tmp$Group), c("Taxon", "Group", "R.sq", "adj.R.sq", "Sig")]
tab <- flextable(tmp)
tab <- colformat_double(tab, digits = 3)
tab <- align(tab, align = "center")
tab <- align(tab, j = 1:2, align = "right")
tab <- align(tab, j = 3:4, align = "left")
tab <- color(tab, i = 1, j = 5, color = "white", part = "header")
tab <- bold(tab, i = ~ Sig == '**')
tab <- width(tab, j = 'Sig', width = 0.1)
theme_vanilla(tab)
tmp <- R.sq_sr[which(R.sq_sr$Taxon == 'Amphibia'), ]
tmp$Sig <- ' '
tmp[which(tmp$R.sq > 0.33), 'Sig'] <- '*'
tmp[which(tmp$adj.R.sq > 0.33), 'Sig'] <- '*'
tmp[which(tmp$R.sq > 0.33 & tmp$adj.R.sq > 0.33), 'Sig'] <- '**'
tmp <- tmp[order(tmp$Group), c("Taxon", "Group", "R.sq", "adj.R.sq", "Sig")]
tab <- flextable(tmp)
tab <- colformat_double(tab, digits = 3)
tab <- align(tab, align = "center")
tab <- align(tab, j = 1:2, align = "right")
tab <- align(tab, j = 3:4, align = "left")
tab <- color(tab, i = 1, j = 5, color = "white", part = "header")
tab <- bold(tab, i = ~ Sig == '**')
tab <- width(tab, j = 'Sig', width = 0.1)
theme_vanilla(tab)
tmp <- R.sq_sr[which(R.sq_sr$Taxon == 'Anolis'), ]
tmp$Sig <- ' '
tmp[which(tmp$R.sq > 0.33), 'Sig'] <- '*'
tmp[which(tmp$adj.R.sq > 0.33), 'Sig'] <- '*'
tmp[which(tmp$R.sq > 0.33 & tmp$adj.R.sq > 0.33), 'Sig'] <- '**'
tmp <- tmp[order(tmp$Group), c("Taxon", "Group", "R.sq", "adj.R.sq", "Sig")]
tab <- flextable(tmp)
tab <- colformat_double(tab, digits = 3)
tab <- align(tab, align = "center")
tab <- align(tab, j = 1:2, align = "right")
tab <- align(tab, j = 3:4, align = "left")
tab <- color(tab, i = 1, j = 5, color = "white", part = "header")
tab <- bold(tab, i = ~ Sig == '**')
tab <- width(tab, j = 'Sig', width = 0.1)
theme_vanilla(tab)
tmp <- R.sq_sr[which(R.sq_sr$Taxon == 'Eleutherodactylus'), ]
tmp$Sig <- ' '
tmp[which(tmp$R.sq > 0.33), 'Sig'] <- '*'
tmp[which(tmp$adj.R.sq > 0.33), 'Sig'] <- '*'
tmp[which(tmp$R.sq > 0.33 & tmp$adj.R.sq > 0.33), 'Sig'] <- '**'
tmp <- tmp[order(tmp$Group), c("Taxon", "Group", "R.sq", "adj.R.sq", "Sig")]
tab <- flextable(tmp)
tab <- colformat_double(tab, digits = 3)
tab <- align(tab, align = "center")
tab <- align(tab, j = 1:2, align = "right")
tab <- align(tab, j = 3:4, align = "left")
tab <- color(tab, i = 1, j = 5, color = "white", part = "header")
tab <- bold(tab, i = ~ Sig == '**')
tab <- width(tab, j = 'Sig', width = 0.1)
theme_vanilla(tab)
options(na.action = "na.omit")
st.err <- function(x) {sd(x)/sqrt(length(x))}
tmp <- unique(Avg.est[, c("Taxon", "Group", "Abbr", "Class")])
abbr.ord.sr <- c(1, 14, 16, 2, 13, 11, 15, 3, 5, 6, 8, 18, 10, 17, 12, 4, 7, 9)
tmp$Abbr.SR <- factor(tmp$Abbr, unique(tmp$Abbr)[abbr.ord.sr])
R.sq_sr <- merge(R.sq_sr, tmp, by = c('Taxon', 'Group'), all = TRUE)
R.sq_sr <- droplevels(R.sq_sr[which(R.sq_sr$Taxon != 'Anura'), ])
R.sq_sr[which(R.sq_sr$Group == 'N'), 'Group'] <- 'Native'
R.sq_sr[which(R.sq_sr$Group == 'E'), 'Group'] <- 'Introduced'
R.sq_sr[which(R.sq_sr$Group == 'T'), 'Group'] <- 'Total'
avg.r.sq <- merge(aggregate(R.sq ~ Class + Group,
data = droplevels(R.sq_sr[which(R.sq_sr$Taxon != 'All'), ]), mean),
aggregate(R.sq ~ Class + Group,
data = droplevels(R.sq_sr[which(R.sq_sr$Taxon != 'All'), ]), st.err),
by = c('Class', 'Group'), all = TRUE)
names(avg.r.sq) <- c("Class", "Group", "R.sq", "SE")
r_sq.fig.A <- ggplot(avg.r.sq, aes(x = Class, y = R.sq, fill = Group, color = Group)) +
geom_bar(stat = 'identity', width=0.75, position = position_dodge()) +
geom_errorbar(aes(ymin = R.sq - SE, ymax = R.sq + SE), position = position_dodge(.75),
width = 0.25, color = 'black') +
scale_fill_manual(values = cols) +
scale_color_manual(values = cols) +
scale_x_discrete(limits = levels(avg.r.sq$Class),
labels = c('Amphibian', 'Reptile')) +
ylab(expression('Mean '~R^2~' ('%+-%'SE)')) + scale_y_continuous(expand = c(0, 0)) +
theme_minimal() +
theme(legend.position = 'none',
axis.line.y = element_line(color = 'black'),
axis.text.y = element_text(size = 10, color = 'black'),
axis.title.y = element_text(size = 12),
axis.ticks.y = element_line(color = 'black'),
panel.grid.major.x = element_blank(),
axis.text.x = element_text(size = 10, color = 'black'),
axis.title.x = element_blank())
#r_sq.fig.A
r_sq.fig.B <- ggplot(droplevels(R.sq_sr[which(R.sq_sr$Taxon != 'All'), ]),
aes(x = Abbr.SR, y = R.sq, color = Group, fill = Group)) +
geom_bar(stat = 'identity', position = position_dodge()) +
scale_color_manual(values = cols) +
scale_fill_manual(values = cols) +
scale_y_continuous(labels = scaleFUN, expand = c(0, 0)) +
xlab('\nTaxonomic Clade') + ylab(expression('Model Fit  ('~R^2~')')) +
theme_minimal() +
theme(legend.position = 'none',
axis.line.y = element_line(color = 'black'),
axis.text.y = element_text(size = 12, color = 'black'),
axis.title.y = element_text(size = 14, color = 'black'),
axis.ticks.y = element_line(color = 'black'),
panel.grid.major.x = element_blank(),
axis.title.x = element_text(size = 14, color = 'black'),
axis.text.x = element_text(size = 12, angle = 90, hjust = 1, vjust = 0.5,
color = 'black'))
#r_sq.fig.B
r_sq.tmp1 <- r_sq.fig.A + labs(tag = '(B)') +
theme(axis.title.y = element_text(size = 10),
axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1))
r_sq.tmp2 <- r_sq.fig.B + labs(tag = '(A)')+
theme(axis.title.x = element_text(size = 12))
leg <- as_ggplot(get_legend(r_sq.tmp2 + guides(fill = guide_legend(title = 'Assemblage'), color = FALSE) +
theme(legend.position = 'right')))
lay <- rbind(c(1, 2),
c(1, 2),
c(1, 3),
c(1, 3))
(fig_s1 <- grid.arrange(grobs = list(r_sq.tmp2, r_sq.tmp1, leg), layout_matrix = lay,
widths = c(6, 2), heights = c(1.25, 1, 1, 0.75)))
ggsave(file.path(here(), 'data_out', 'results', 'sr_drivers', 'figs', 'Fig_S1_SuppInfo_psd-std.tif'), fig_s1,
device = 'tiff', height = 4, width = 8, units = 'in', dpi = 300)
ggsave(file.path(here(), 'data_out', 'results', 'sr_drivers', 'figs', 'Fig_5_psd-std.tif'), fig_4,
device = 'tiff', height = 7, width = 9, units = 'in', dpi = 300)
ggsave(file.path(here(), 'data_out', 'results', 'sr_drivers', 'figs', 'Fig_6_psd-std.tif'), fig_5,
device = 'tiff', height = 4.83, width = 9, units = 'in', dpi = 300)
# Load the taxonomic hierarchy for the Caribbean herps
carib.hier <- read.csv(file.path(here(), 'data_out', 'results', 'sar_lin', 'supp_info', 'SARLin_Node_Clade_Data.csv'), header=TRUE)
# Load the clade data
cld.dat <- read.csv(file.path(here(), 'data_out', 'results', 'sar_lin', 'supp_info', 'SARLin_Node_Clade_Data.csv'),
header = TRUE)
View(cld.dat)
library(readr)
SARLin_Node_Clade_Matrix <- read_csv("data_out/results/sar_lin/supp_info/SARLin_Node_Clade_Matrix.csv")
View(SARLin_Node_Clade_Matrix)
